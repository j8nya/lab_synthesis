#Сортировка слиянием
def MergeSort(nums):
    if len(nums)<=1:
            return nums
        m=len(nums)//2 
        left=nums [:m] 
        right=nums[m:]
        self.sortArray(left) 
        self.sortArray(right)
        i=j=k=0
        while i<len(left) and j<len(right):
            if left[i]<right[j]:
                nums[k]=left[i]
                i+=1 
            else:
                nums[k]=right[j]
                j+=1
            k+=1
        while i<len(left):
            nums[k]=left[i]
            i+=1
            k+=1
        while j<len(right):
            nums[k]=right[j]
            j+=1
            k+=1
        return nums

#Разбивка для быстрой сортировки
def QuickPart(data, mid):
    left = []
    m = []
    right = []
    for i in data:
        if i < data[mid]:
            left.append(i)
        elif i > data[mid]:
            right.append(i)
        else:
            m.append(i)

    return QuickSort(left), m, QuickSort(right)

#Быстрая сортировка
def QuickSort(data):
    if len(data) <= 1:
        return data
    elif len(data) == 2 and data[0] > data[1]:
        data[0], data[1] = data[1], data[0]
        return data

    mid = len(data) // 2

    left, middle, right = QuickPart(data, mid)

    return left + middle + right

#Сортировка подсчетом
def CountingSort(self, data):
    max_k = max(data)
    min_k = min(data)
    l = [0] * (max_k - min_k + 1)
    for i in data:
        l[i - min_k] += 1
    result = []
    for i in range(len(l)):
        if l[i] > 0:
            result += [i + min_k] * l[i]

    return result

class Solution:
    def sortArray(self, nums):
        # return MergeSort(nums)
        # return CountingSort(nums)
        # return QuickSort(nums)
        pass
